#유클리드 호제법 기억하기
#fractions , math 에 gcd 있음 
# lcm= a*b/gcd 
# gcd= a*b/lcm

def gcd(a,b):
    while b:
        a,b=b,a%b
    return a

def lcm(a,b):
    return int(a*b/gcd(a,b))

def solution(arr):
    while True:
        arr.append(lcm(arr.pop(),arr.pop()))
        if len(arr)==1:
            return arr[-1]
        
        
#----------------------------------------------------------------------------------
#gcd구하고 arr원소들 다 곱한후에 len(arr)-1 만큼 나누는 코드(테스트 케이스는 되나 히든 안 됨)
    # gcd_list=[]
    # for i in range(1,max(arr)+1):
    #     for j in range(len(arr)):
    #         if arr[j]%i!=0:
    #             gcd_list.append(i)
    #             break
    # gcd=max(list(set([i for i in range(1,max(arr)+1)])-set(gcd_list)))
    # answer=1
    # for i in range(len(arr)):
    #     answer=answer*arr[i]
    # return answer/(gcd)**(len(arr)-1)
#----------------------------------------------------------------------------------
#gcd구하고 arr원소들 다 곱한후에 len(arr)-1 만큼 나누는 코드(테스트 케이스는 되나 히든 안 됨)
#     gcd_list=[]
#     for i in range(1,max(arr)+1):
#         count=0
#         for j in range(len(arr)):
#             if arr[j]%i==0:
#                 count+=1
#         if count==len(arr):
#             gcd_list.append(i)

#     answer=1
#     for i in range(len(arr)):
#         answer=answer*arr[i]
#     for i in range(len(arr)-1):
#         answer=answer/max(gcd_list)
#     return answer
